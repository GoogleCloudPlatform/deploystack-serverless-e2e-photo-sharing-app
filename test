# I think it's a good idea to test your scripts. It's kinda awkward but you'll 
# be happy you did 


# DON'T REMOVE FROM test script.
CYAN='\033[0;36m'
BCYAN='\033[1;36m'
NC='\033[0m' # No Color
DIVIDER=$(printf %"$(tput cols)"s | tr " " "*")
DIVIDER+="\n"

function get_project_id() {
    local __resultvar=$1
    VALUE=$(gcloud config get-value project | xargs)
    eval $__resultvar="'$VALUE'"
}

function get_project_number() {
    local __resultvar=$1
    local PRO=$2
    VALUE=$(gcloud projects list --filter="project_id=$PRO" --format="value(PROJECT_NUMBER)" | xargs)
    eval $__resultvar="'$VALUE'"
}

# DISPLAY HELPERS
function section_open() {
    section_description=$1
    printf "$DIVIDER"
    printf "${CYAN}$section_description${NC} \n"
    printf "$DIVIDER"
}

function section_close() {
    printf "$DIVIDER"
    printf "${CYAN}$section_description ${BCYAN}- done${NC}\n"
    printf "\n\n"
}

function evalTest() {
    local command=$1
    local expected=$2

    local ERR=""
    got=$(eval $command 2>errFile)
    ERR=$(<errFile)

    if [ ${#ERR} -gt 0 ]; then
        if [ "$expected" = "EXPECTERROR" ]; then
            printf "Expected Error thrown \n"
            return
        fi

        printf "Halting - error: '$ERR'  \n"
        exit 1
    fi

    if [ "$got" != "$expected" ]; then
        printf "Halting: '$got'  \n"
        exit 1
    fi

    printf "$expected is ok\n"
}

# END DON'T REMOVE FROM test script.


get_project_id PROJECT
gcloud services enable \
  cloudbuild.googleapis.com \
  run.googleapis.com \
  cloudresourcemanager.googleapis.com 
  --project=$PROJECT
get_project_number PROJECT_NUMBER $PROJECT
REGION=us-west1
ZONE=us-west1-a
BASENAME=serverless-social-media

CLIENT=client
SERVER=server

gcloud config set project ${PROJECT}

terraform init
terraform plan -var=project=${PROJECT}
terraform apply -auto-approve -var=project=${PROJECT}


# section_open "Test Client Instance"
#     evalTest 'gcloud compute instances describe $CLIENT --zone="$ZONE" --format="value(name)"'  $CLIENT
# section_close

# section_open "Test Server Instance"
#     evalTest 'gcloud compute instances describe $SERVER --zone="$ZONE" --format="value(name)"'  $SERVER
# section_close


# section_open "Test Client is running"
#     CLIENT=$(terraform output client_url)
#     CLIENT=${CLIENT//\"/}
#     CLIENT=${CLIENT//http:\/\//}
#     echo "Testing $CLIENT"

#     attempt_counter=0
#     max_attempts=50

#     until $(curl --output /dev/null --silent --head --fail http://$CLIENT); do
#         if [ ${attempt_counter} -eq ${max_attempts} ];then
#         echo "Max attempts reached"
#         exit 1
#         fi

#         printf '.'
#         attempt_counter=$(($attempt_counter+1))
#         sleep 5
#     done
# section_close


terraform destroy -var=project=${PROJECT}



# section_open "Test Client Instance"
#     evalTest 'gcloud compute instances describe $CLIENT --zone="$ZONE" --format="value(name)"'  "EXPECTERROR"
# section_close

# section_open "Test Server Instance"
#     evalTest 'gcloud compute instances describe $SERVER --zone="$ZONE" --format="value(name)"'  "EXPECTERROR"
# section_close



printf "$DIVIDER"
printf "CONGRATS!!!!!!! \n"
printf "You got the end the of your test with everything working. \n"
printf "$DIVIDER"