# I think it's a good idea to test your scripts. It's kinda awkward but you'll 
# be happy you did 


# DON'T REMOVE FROM test script.
CYAN='\033[0;36m'
BCYAN='\033[1;36m'
NC='\033[0m' # No Color
DIVIDER=$(printf %"$(tput cols)"s | tr " " "*")
if [ -z "$DIVIDER" ]
then
      DIVIDER=$(printf %"80"s | tr " " "*")
fi
DIVIDER+="\n"


function get_project_id() {
    local __resultvar=$1
    VALUE=$(gcloud config get-value project | xargs)
    eval $__resultvar="'$VALUE'"
}

function get_project_number() {
    local __resultvar=$1
    local PRO=$2
    VALUE=$(gcloud projects list --filter="project_id=$PRO" --format="value(PROJECT_NUMBER)" | xargs)
    eval $__resultvar="'$VALUE'"
}

# DISPLAY HELPERS
function section_open() {
    section_description=$1
    printf "$DIVIDER"
    printf "${CYAN}$section_description${NC} \n"
    printf "$DIVIDER"
}

function section_close() {
    printf "$DIVIDER"
    printf "${CYAN}$section_description ${BCYAN}- done${NC}\n"
    printf "\n\n"
}

function evalTest() {
    local command=$1
    local expected=$2

    local ERR=""
    got=$(eval $command 2>errFile)
    ERR=$(<errFile)

    if [ ${#ERR} -gt 0 ]; then
        if [ "$expected" = "EXPECTERROR" ]; then
            printf "Expected Error thrown \n"
            return
        fi

        printf "Halting - error: '$ERR'  \n"
        exit 1
    fi

    if [ "$got" != "$expected" ]; then
        printf "Halting: '$got' expected '$expected'  \n"
        exit 1
    fi

    printf "$expected is ok\n"
}

# END DON'T REMOVE FROM test script.

get_project_id PROJECT
get_project_number PROJECT_NUMBER $PROJECT
REGION=us-west1
ZONE=us-west1-a
BASENAME=serverless-social-media


gcloud config set project ${PROJECT}


private_ip_name=$(terraform output -raw private_ip_name)


section_open "Delete Load Balancer parts"
    gcloud compute forwarding-rules delete  $PROJECT  -q
    gcloud compute target-http-proxies delete $PROJECT-http-proxy   -q
    gcloud compute url-maps delete $PROJECT-url-map  -q
    gcloud compute url-maps delete $PROJECT-https-redirect -q
    gcloud compute backend-services delete $PROJECT-backend-default  -q --global
section_close


section_open "Delete Cloud Run Services"
    gcloud run services delete $PROJECT --region=us-central1 -q
    gcloud run services delete $PROJECT --region=us-west1 -q
    gcloud run services delete $PROJECT --region=us-east1 -q
section_close

section_open "Deleting Secrets"
    gcloud secrets delete django_settings  -q
    gcloud secrets delete DATABASE_PASSWORD  -q
    gcloud secrets delete DATABASE_USER  -q
    gcloud secrets delete DATABASE_NAME  -q
    gcloud secrets delete DATABASE_HOST_PROD  -q
    gcloud secrets delete DATABASE_PORT_PROD  -q
    gcloud secrets delete EXTERNAL_IP  -q
    gcloud secrets delete GS_BUCKET_NAME  -q
    gcloud secrets delete PROJECT_ID  -q
    gcloud secrets delete WEBSITE_URL_US_CENTRAL1  -q
    gcloud secrets delete WEBSITE_URL_US_WEST1  -q
    gcloud secrets delete WEBSITE_URL_US_EAST1  -q
    gcloud secrets delete SUPERUSER_PASSWORD  -q
section_close

section_open "Delete SQL Server"
    sql_servers_raw=$(gcloud sql instances list --format="value(name)")
    read -r -a sql_servers <<< $(echo "$sql_servers_raw" | tr '\n' ' ')


    for sql_name in "${sql_servers[@]}"; do
    gcloud sql instances delete $sql_name -q 
    done
section_close

section_open "Delete the Cloud Storage Bucket"
    gsutil rm -rf gs://$PROJECT-bucket/*
    gsutil rb gs://$PROJECT-bucket 
section_close

section_open "Delete Service Account"
    gcloud iam service-accounts delete django@$PROJECT.iam.gserviceaccount.com -q
section_close

section_open "Deleting VPNs"
    gcloud compute networks vpc-access connectors delete vpc-con-us-west1 --region us-west1 -q
    gcloud compute networks vpc-access connectors delete vpc-con-us-central1 --region us-central1 -q
    gcloud compute networks vpc-access connectors delete vpc-con-us-east1 --region us-east1  -q
section_close

section_open "Deleting Network Endpoint Groups"
   gcloud compute network-endpoint-groups delete $PROJECT--neg--us-west1 --region us-west1 -q
   gcloud compute network-endpoint-groups delete $PROJECT--neg--us-central1 --region us-central1 -q
   gcloud compute network-endpoint-groups delete $PROJECT--neg--us-east1 --region us-east1  -q
section_close

section_open "Delete Load Balancer parts"
    gcloud compute forwarding-rules delete  $PROJECT  -q
    gcloud compute target-http-proxies delete $PROJECT-http-proxy   -q
    gcloud compute url-maps delete $PROJECT-url-map  -q
    gcloud compute url-maps delete $PROJECT-https-redirect -q
    gcloud compute backend-services delete $PROJECT-backend-default  -q --global
section_close

section_open "Delete the IP Address"
    ip_addresses_raw=$(gcloud compute addresses list --format="value(name)")
    read -r -a ip_addresses <<< $(echo "$ip_addresses_raw" | tr '\n' ' ')


    for sql_name in "${ip_addresses[@]}"; do
        gcloud compute addresses delete $ip_addresses --global -q 
    done

    ip_addresses_raw=$(gcloud compute addresses list --format="value(name)")
    read -r -a ip_addresses <<< $(echo "$ip_addresses_raw" | tr '\n' ' ')


    for sql_name in "${ip_addresses[@]}"; do
        gcloud compute addresses delete $ip_addresses --global -q 
    done

section_close



section_open "Delete Extraneous networks"
networks_raw=$(gcloud compute networks list --format="value(name)")
    read -r -a networks <<< $(echo "$networks_raw" | tr '\n' ' ')


    for network in "${networks[@]}"; do

        if [[ "$network" = "default"  ]]
        then 
           echo "don't delete default"
        else 
           echo "delete $network"
           gcloud compute networks delete $network -q 
        fi    
    done
section_close






printf "$DIVIDER"
printf "CONGRATS!!!!!!! \n"
printf "You got the end the of your test with everything working. \n"
printf "$DIVIDER"